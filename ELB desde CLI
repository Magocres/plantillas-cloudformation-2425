#creo y devuelve el id de la vpc creada 
VPC_ID=$(aws ec2 create-vpc \
  --cidr-block 15.0.0.0/20 \
  --amazon-provided-ipv6-cidr-block \
  --tag-specifications 'ResourceType=vpc,Tags=[{Key=Name,Value=mivpc}]' \
  --query 'Vpc.{VpcId:VpcId}' \
  --output text )
echo "Creando VPC..."

#habilitar dns en la vpc
aws ec2 modify-vpc-attribute \
  --vpc-id $VPC_ID \
  --enable-dns-hostnames "{\"Value\":true}"

######################################
#crea y devuelve el id de la subred pública
SUBNET_ID_1=$(aws ec2 create-subnet \
  --vpc-id $VPC_ID \
  --cidr-block 15.0.1.0/20 \
  --availability-zone us-east-1a \
  --tag-specifications 'ResourceType=subnet,Tags=[{Key=Name,Value=misubnet1}]' \
  --query Subnet.SubnetId \
  --output text)
echo "Creando Subnet..."

aws ec2 modify-subnet-attribute \
  --subnet-id $SUBNET_ID_1 \
  --map-public-ip-on-launch
echo "Habilitando asignación de ipv4pública en la Subred 1..."

SUBNET_ID_2=$(aws ec2 create-subnet \
  --vpc-id $VPC_ID \
  --cidr-block 15.0.1.0/20 \
  --availability-zone us-east-1b \
  --tag-specifications 'ResourceType=subnet,Tags=[{Key=Name,Value=misubnet2}]' \
  --query Subnet.SubnetId \
  --output text)
echo "Creando Subnet..."

aws ec2 modify-subnet-attribute \
  --subnet-id $SUBNET_ID_2 \
  --map-public-ip-on-launch
echo "Habilitando asignación de ipv4pública en la Subred 2..."

SG_ID=$(aws ec2 create-security-group \
  --vpc-id $VPC_ID \
  --group-name misecuritygroup \
  --description "grupo de seguridad para abrir el puerto 22" \
  --query "GroupId" \
  --output text )
echo "Creando SG..."

# Abrir los puertos de acceso al grupo
#paso 2
aws ec2 authorize-security-group-ingress \
  --group-id $SG_ID  \
  --ip-permissions '[{"IpProtocol": "tcp", "FromPort": 22, "ToPort": 22, "IpRanges": [{"CidrIp": "0.0.0.0/0", "Description": "Allow SSH"}]}]'
echo "Abriendo puertos al SG 1..."

EC2_ID_1=$(aws ec2 run-instances \
    --image-id ami-0c7217cdde317cfec \
    --instance-type t3.micro \
    --key-name vockey \
    --subnet-id $SUBNET_ID_1 \
    --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=EC2_1}]' \
    --private-ip-address 172.16.0.100 \
    --security-group-ids $SG_ID \
    --query 'Instances[0].InstanceId' \
    --output text )
echo "Creando EC2 1..."

EC2_ID_2=$(aws ec2 run-instances \
    --image-id ami-0c7217cdde317cfec \
    --instance-type t3.micro \
    --key-name vockey \
    --subnet-id $SUBNET_ID_2 \
    --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=EC2_2}]' \
    --private-ip-address 172.16.0.100 \
    --security-group-ids $SG_ID \
    --query 'Instances[0].InstanceId' \
    --output text )
echo "Creando EC2 2..."

# Crear balanceador de carga
ARN_LB=$(aws elbv2 create-load-balancer \
    --name my-load-balancer-mario  \
    --subnets $SUBNET_ID_1 $SUBNET_ID_2 \
    --security-groups $SG_ID \
    --query 'LoadBalancers[0].LoadBalancerArn' \
    --output text)

# Guardamos el ARN del balanceador de carga en la variable $ARN_LB
echo "Balanceador de carga creado. ARN: $ARN_LB"

# Crear un grupo de destino (target group)
ARN_TG_1=$(aws elbv2 create-target-group \
    --name my-target-mario-1 \
    --protocol HTTP --port 80 \
    --vpc-id $VPC_ID \
    --ip-address-type ipv4 \
    --query 'TargetGroups[0].TargetGroupArn' \
    --output text)

ARN_TG_2=$(aws elbv2 create-target-group \
    --name my-target-mario-2 \
    --protocol HTTP --port 80 \
    --vpc-id $VPC_ID \
    --ip-address-type ipv4 \
    --query 'TargetGroups[0].TargetGroupArn' \
    --output text)

# Guardamos el ARN del grupo de destino en la variable $ARN_TG
echo "Grupo de destino creado. ARN: $ARN_TG_1 y $ARN_TG_2"

# Registrar instancias con el grupo de destino
aws elbv2 register-targets \
    --target-group-arn $ARN_TG_1 \
    --targets Id=$EC2_1

# Registrar instancias con el grupo de destino

aws elbv2 register-targets \
    --target-group-arn $ARN_TG_2 \
    --targets Id=$EC2_2

echo "Instancias registradas en el grupo de destino"  

# Crear un oyente para el balanceador de carga
aws elbv2 create-listener \
    --load-balancer-arn $ARN_LB \
    --protocol HTTP --port 80  \
    --default-actions Type=forward,TargetGroupArn=$ARN_TG

# Crear un oyente con los Pesos ya definidos
aws elbv2 create-listener \
    --load-balancer-arn $ARN_LB \
    --protocol HTTP --port 80 \
    --default-actions '[{"Type":"forward","ForwardConfig":{"TargetGroups":[{"TargetGroupArn":"'"$ARN_TG_1"'","Weight":70},{"TargetGroupArn":"'"$ARN_TG_2"'","Weight":30}]}}]'

echo "Oyente creado en el puerto 80 del balanceador de carga. Las solicitudes se reenvían al grupo de destino."  

# Modificar las reglas
aws elbv2 modify-rule \
  --rule-arn "<ARN_REGLA>" \
  --actions '[{
      "Type": "forward",
      "ForwardConfig": {
        "TargetGroups": [
          {
            "TargetGroupArn": "'"$ARN_TG_1"'",
            "Weight": 70
          },
          {
            "TargetGroupArn": "'"$ARN_TG_2"'",
            "Weight": 30
          }
        ]
      }
  }]'

# Comprobar el estado de los destinos registrados
aws elbv2 describe-target-health \
    --target-group-arn $ARN_TG

#Borrar el Load Balancer
#aws elbv2 delete-load-balancer \
#    --load-balancer-arn arn:aws:elasticloadbalancing:us-east-1:155279537870:loadbalancer/app/my-load-balancer-mario/423215ac73a89d92 \

#Borrar Target Group
#aws elbv2 delete-target-group \
#    --target-group-arn arn:aws:elasticloadbalancing:us-east-1:155279537870:targetgroup/my-target-mario/6845fd6a4613190e  \
