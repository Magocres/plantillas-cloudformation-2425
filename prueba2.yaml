AWSTemplateFormatVersion: "2010-09-09"
Description: "Plantilla para crear una instancia EC2 con una VPC, subred p√∫blica, acceso a Internet, grupod de seguridad y NAT Gateway"

Parameters:
  ImageId:
    Type: String
    Default: "ami-0c02fb55956c7d316"
    Description: "ID de la imagen AMI para la instancia EC2"
    AllowedValues:
      - "ami-0c02fb55956c7d316"  # Amazon Linux 2
      - "ami-0d8f6eb4f641ef691"  # Ubuntu Server 20.04 LTS
      - "ami-0a91cd140a1fc148a"  # Red Hat Enterprise Linux 8
    ConstraintDescription: "Debe ser una de las AMIs permitidas: Amazon Linux 2, Ubuntu Server 20.04 LTS o Red Hat Enterprise Linux 8."

Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "11.0.0.0/20"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: "Name"
          Value: "MiVPC"


  PublicSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "11.0.0.0/24"
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
        - Key: "Name"
          Value: "MiPublicSubnet"

  PrivateSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "11.0.1.0/24"
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
        - Key: "Name"
          Value: "MiPrivateSubnet"

  MySecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Permitir acceso SSH"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"

  PublicEC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: "t2.micro"
      KeyName: "vockey"
      ImageId: !Ref ImageId
      SecurityGroupIds:
        - !Ref MySecurityGroup
      SubnetId: !Ref PublicSubnet

  PrivateEC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: "t2.micro"
      KeyName: "vockey"
      ImageId: !Ref ImageId
      SecurityGroupIds:
        - !Ref MySecurityGroup
      SubnetId: !Ref PrivateSubnet

  MyInternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: "Name"
          Value: "MiIGW"

  GatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref MyInternetGateway

  MyElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC

  NatGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt MyElasticIP.AllocationId
      SubnetId: !Ref PublicSubnet

  NatGatewayAttachment:
    Type: "AWS::EC2::EIP"
    DependsOn: GatewayAttachment
    Properties:
      Domain: VPC

  PublicSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: "PublicRouteTable"

  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: "PrivateRouteTable"

  PublicRoute1:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref MyInternetGateway

  PrivateRoute1:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
